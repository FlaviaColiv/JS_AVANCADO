Array === lista

Transforma as listas
Filter === filtra itens em uma lista
Map === retorna uma nova array com a mesma quantidade de itens na lista
Reduce === generica de trabalhar com arrays

Interpolação entre Strings === Tamplate literal coloca com o acento crase e ${...}

Desestruturação de objeto === usa cheves {nome: nome, idade: idade, propriedade: variedade} vários objetos 
Desestruturação de array === usa colchetes
let [ um, dois, tres ] = numeros

Spred === expandir os objetos de um objeto interável (objetos que podem ser percorridos) - retorna os itens completos não individualmente. Função igual a CONCAT. Mas, economiza código.
[...objeto]

Parametro REST === além dos ... usa dentro dos parentes e o argumento e monta na forma de um array 
function(a, b, ...argumento) {
    ....
} com a função map seleciona individualmente (não sabe quantos paramentros que passar em uma função)

SetInterval === repetidamente em um intervalo de tempo
SetTimeout === reprozu depois de um tempo
Funções executar código assicronamente, recebe funções como paramentro, chama como Alert. Trabalha como milissegundo (3s = 3000)
O que vier depois e não for esses assincronos, mesmo assim, é apresentado antes do assincrono.
Para parar execução clearInterval(idDoIntervalo) ou clearTimeout()

Código Síncrono (linear de execução) e Assíncrono (descola da continuidade e é apresentado em um tempo diferente).

Promisses 
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise, de forma sequencial e facilita as exceções. Encadeamento de CallBacks
Tem 4 estados: Pendente; Realizada (resolv); Recusada (Reject); Estabelecida.
É uma classe e a primeira letra maiuscula 
new Promise(funçãoresolv, funçãoreject) => {
}

() => aerofunction

THEN === então
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/then
executa somente depois da anterior
só pode usar se retorna uma Promise

Async e Await
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function
async sempre na função imediata da função, e só usa await dentro da função async, ela espera terminar para começar, depencia de uma função.

Tratar erros JavaScript
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error
usa try { 
    todos os bloco dentro do try}
    catch(erro){
        pegar os erros e tratar
throw "cria a excessão"}
finnaly{ 
    escreve bloco e fanaliza o processo com os comandos independente do erro, bom para fechar banco de dados}

API

Agora vamos aprender o que é uma API, o que são endpoints, request/response e mostrar exemplos de APIs famosas.

Links de algumas APIs: ​

JSON Placeholder https://jsonplaceholder.typicode.com/
JSONPlaceholder é um serviço REST on-line gratuito que você pode usar sempre que precisar de alguns dados para exibir em suas aplicações. É ótimo para ser usado em tutoriais e simula um servidor, compartilhando exemplos de código.
Você pode simular requisições HTTP com GET, POST, PUT e DELETE.
Não precisa registro.

Makeup API https://makeup-api.herokuapp.com/
Um serviço onde você pode pesquisar produtos de maquiagem e fazer filtros por marca, preço, categoria de produto, tags e muito mais. Essa API também fornece uma representação visual de todos os dados JSON que estão disponíveis.
Não precisa registro.

Deck of Cards API http://deckofcardsapi.com/
Nessa API você pode embaralhar cartas de baralho, comprar uma carta, reembaralhar cartas, ganhar um novo baralho, adicionar uma pilha de cartas, comprar uma pilha de cartas e outros recursos.
Uma API muito divertida.
Não precisa de registro.

Open Trivia DB https://opentdb.com/api_config.php
O Open Trivia Database fornece uma API JSON completamente gratuita para uso em projetos de programação. O uso desta API não requer uma chave de API, basta gerar a URL com um clique de botão no site e você já pode usar a API no seu aplicativo para recuperar perguntas triviais.
Não precisa de registro.

Nasa https://api.nasa.gov/
A API da Nasa é ideal se você deseja acessar dados de astronomia e imagens de planetas e galáxias.
Precisa de registro.

Marvel https://developer.marvel.com/
A API Marvel Comics permite que os desenvolvedores acessem informações sobre a vasta biblioteca de quadrinhos da Marvel - desde o que está chegando agora, até 70 anos atrás.
Precisa de registro.

Youtube https://developers.google.com/youtube/
A API do Youtube permite que você adicione funcionalidade do Youtube a sites e aplicativos.
Requer registro.

MovieDB https://www.themoviedb.org/documentation/api
Uma API com dados de filmes, atores e programas de TV.

API === Application Programming Interface (Interface de Programação de Aplicações) === Conjunto de padrões de programação que permite a construção de sistemas que abstraem muita coisa de código.
São disponibilizadas através de endpoints, que são URLs que chama para buscas listas. Funcionam de 4 maneiras diferentes: Get (buscar informações); Post (Enviar informações para a API, cadastrar cliente); PUT (Alterar estado de alguma informação); Delete (deletar registro).

PC request API (linkada ao banco de dados) e API response ao PC com dados JSON.

JavaScript Avançado - JSON
O JSON (JavaScript Object Notation - Notação de Objetos JavaScript) ele é um arquivo é uma formatação leve de troca de dados.

JavaScript Avançado - Requisições com o fetch
A API Fetch fornece uma interface JavaScript para acessar e manipular partes do pipeline HTTP, tais como os pedidos e respostas. Ela também fornece o método global fetch que fornece uma maneira fácil e lógica para buscar recursos de forma assíncrona através da rede.

JavaScript Avançado - Promises e os métodos Promise.allSettled() e Promise.all()
Nessa aula, vamos nos aprofundar no conceito de Promises em JavaScript e aprenda sobre os métodos Promise.allSettled() e Promise.all(). 

LINKS DE APOIO:

Método allSettled() - Promise.allSettled() - JavaScript | MDN (mozilla.org) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled
Método all() - Promise.all() - JavaScript | MDN (mozilla.org) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
IMPORTANTE:

No arquivo da aula, contem 3 arquivos para facilitar a execução do código, seguindo essa ordem:

Para executar é necessário usar o comando no terminal, por exemplo: node promise-all.js 

promise-all.js - com a primeira parte da aula, lembrando que existem coisas comentadas para acompanhar juntamente com a aula
promse-all-settled.js - segunda parte da aula 
promise-all-real - exemplo prático do github