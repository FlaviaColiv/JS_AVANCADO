Exerc√≠cios JavaScript avan√ßado - Exerc√≠cio Js avan√ßado - app de gerador de conselhos
Continuando com o exerc√≠cio anterior que foi realizado no m√≥dulo de exerc√≠cios CSS avan√ßado - Flexbox, agora vamos aplicar o JavaScript para gerar os conselhos aleatoriamente diretamente da API de conselhos.

Use os conhecimentos que aprendeu no m√≥dulo de JavaScript avan√ßado pra resolv√™-lo da melhor forma, leia atentamente a descri√ß√£o da tarefa.

Tente realizar o exerc√≠cio sozinho(a), e depois verifique a solu√ß√£o proposta nas anota√ß√µes.

Link para o exerc√≠cio proposto:  Exerc√≠cio HTML + CSS + JS Avan√ßado - Parte 2 - Gerador de conselhos (notion.site) https://humane-legend-9f9.notion.site/Exerc-cio-HTML-CSS-JS-Avan-ado-Parte-2-Gerador-de-conselhos-0f81d020adf9461aaf5c7e7f2858db07

Quando finalizar, n√£o se esque√ßa de colocar no seu GitHub e compartilhe no Linkedln! 

Boa sorte!

IMPORTANTE: A resolu√ß√£o completa estar√° no logo abaixo!
Links de apoio:
Documenta√ß√£o da Api de conselhos: Advice Slip JSON API - Usem o RANDOM ADVICE APENAS, n√£o √© necess√°rio o ID https://api.adviceslip.com/#endpoint-random
JavaScript HTML DOM EventListener: JavaScript DOM EventListener (w3schools.com) https://www.w3schools.com/js/js_htmldom_eventlistener.asp

Fun√ß√µes ass√≠ncronas: Fun√ß√µes ass√≠ncronas - JavaScript | MDN (mozilla.org) https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function

Documenta√ß√£o do Objeto Response: Resposta: propriedade ok - APIs da Web | MDN (mozilla.org) https://developer.mozilla.org/en-US/docs/Web/API/Response/ok


Exerc√≠cio HTML + CSS + JS Avan√ßado - Parte 2 - Gerador de conselhos
Importante: Os arquivos iniciais est√£o m√≥dulo: Exerc√≠cios CSS avan√ßado - Flexbox - Exerc√≠cio app de gerador de conselhos
Descri√ß√£o da tarefa: Continuando com o exerc√≠cio Frontend Mentor | Advice generator app coding challenge que foi estilizado no CSS avan√ßado, agora vamos aplicar o JavaScript para gerar os conselhos aleatoriamente diretamente da API de conselhos.
Dicas: 
- √â essencial come√ßar pensando no objetivo do que precisa ser feito e no passo a passo pra chegar l√°.
- Se esquecer algum conceito, basta rever as aulas desse m√≥dulo.
- N√£o esque√ßa de linkar o arquivo JavaScript no html! 
-  Objetivo do exerc√≠cio: ao carregar a p√°gina e ao clicar no bot√£o, deve ser gerado um conselho aleatoriamente da api de conselhos.
- Use MUITO o console.log, debug e a aba console do inspecionar elementos. Assim entender√° o fluxo do c√≥digo e resolver poss√≠veis problemas

N√ÉO SAIA TENTANDO ESCREVER C√ìDIGOS DE QUALQUER MANEIRA! Antes disso voc√™ precisa saber O QUE precisa ser feito e s√≥ depois COMO fazer. üßô‚Äç‚ôÇÔ∏è‚Äã
Passos:
Pegar o elemento de  bot√£o para ser adicionado o evento de clique nele.
Pegar o elemento de id do conselho 
Pegar o elemento de descri√ß√£o do conselho
Ap√≥s conseguirmos os elementos do html, √© necess√°rio a cria√ß√£o da fun√ß√£o respons√°vel por pegar os dados da API. A melhor forma de se consumir a api √© usando async await. Caso n√£o tenha visto a aula, sugiro que assista novamente. Nas refer√™ncias ficar√° um link com exemplos.
Importante que durante a chamada a api seja feito o tratamento dos erros usando o try-catch, caso n√£o lembre pode assistir a aula novamente. 
Dentro da fun√ß√£o, ap√≥s pegarmos os dados da API, √© necess√°rio atualizar o conte√∫do do id e descri√ß√£o do conselho que colocamos em uma vari√°vel usando o innertText. A diferen√ßa entre innerText e innerHTML: 
O innerHTML pode adicionar ou pegar elementos HTML , j√° com o innerText isso n√£o √© possivel, ele pode apenas atribuir um texto ou pegar o texto de determinado elemento.
Nesse caso, queremos s√≥ atribuir um texto, por isso usamos o innerText
Por fim, basta chamar a fun√ß√£o criada.
Atribuir a fun√ß√£o que criamos para ser executada no evento do clique do bot√£o ou se preferir, criar o escopo da fun√ß√£o dentro do listener.
Resolu√ß√£o üëÄ (s√≥ olhe depois de fazer o exerc√≠cio)
‚úÖ JavaScript
const adviceUpdateButton = document.querySelector(".advice-update");
const adviceNumber = document.querySelector(".advice-id");
const adviceDescription = document.querySelector(".advice-description");

async function getAdvice() {
  try {
    const response = await fetch("https://api.adviceslip.com/advice");

    /* 
      A propriedade .ok √© respons√°vel por verificar se a resposta (Response) foi feita com sucesso ou n√£o, 
  
      nesse caso estamos negando a resposta, ou seja, se a resposta n√£o foi feita com sucesso, retornamos um erro.
    
      Ela est√° presente no objeto Response, que √© retornado pela fun√ß√£o fetch. 
    */

    if (!response.ok){
      throw new Error("Ocorreu um erro ao tentar buscar as informa√ß√µes da API");
    }

    const adviceContent = await response.json();
    const adviceId = `Advice #${adviceContent.slip.id}`;
    const adviceText = `"${adviceContent.slip.advice}"`;

    adviceNumber.innerText = adviceId;
    adviceDescription.innerText = adviceText;

  } catch (error) {
    console.error("Erro ao tentar buscar as informa√ß√µes da API", error);
  }
  
}

adviceUpdateButton.addEventListener("click", getAdvice);

getAdvice();